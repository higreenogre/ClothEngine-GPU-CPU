#pragma kernel DistanceCompute


struct dconstraint
    {
        int p1, p2, p3;
    };

struct deltaP
    {
        float3 p1, p2, p3;
    };

StructuredBuffer<float> weights;
RWStructuredBuffer<float3> pos;
StructuredBuffer<dconstraint> Trilist;
StructuredBuffer<deltaP> Iterateconstraint;
float stiffness;
uint TriCount;
float3 deltap;
float3 deltap2;
float3 deltap1;
uint i;

[numthreads(256,1,1)]
void DistanceCompute (uint3 id : SV_DispatchThreadID)
{
    for (uint j=0;j<TriCount*3 ;j++)
        {
            Iterateconstraint[id.x].p1 = pos[Trilist[id.x].p2]-pos[Trilist[id.x].p1];
            Iterateconstraint[id.x].p2 = pos[Trilist[id.x].p3]-pos[Trilist[id.x].p2];
            Iterateconstraint[id.x].p3 = pos[Trilist[id.x].p1]-pos[Trilist[id.x].p3];

            if (j%3 == 0)
            {
                i=(uint) j/3;
            deltap = Iterateconstraint[i].p1;
            deltap1 = (weight[Trilist[i].p1]/(weight[Trilist[i].p1]+weight[Trilist[i].p2]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            deltap2 = (weight[Trilist[i].p2]/(weight[Trilist[i].p1]+weight[Trilist[i].p2]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            pos[Trilist[i].p1] += deltap1;
            pos[Trilist[i].p2] -= deltap2;
            }
            else if(j%3 == 1)
            {
                i=(uint) (j-1)/3;
            deltap = Iterateconstraint[i].p2;
            deltap1 = (weight[Trilist[i].p2]/(weight[Trilist[i].p3]+weight[Trilist[i].p2]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            deltap2 = (weight[Trilist[i].p3]/(weight[Trilist[i].p3]+weight[Trilist[i].p2]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            pos[Trilist[i].p2] += deltap1;
            pos[Trilist[i].p3] -= deltap2;
            }
            else
            {
                i=(uint) (j-2)/3;
            deltap = Iterateconstraint[i].p3;
            deltap1 = (weight[Trilist[i].p3]/(weight[Trilist[i].p3]+weight[Trilist[i].p1]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            deltap2 = (weight[Trilist[i].p1]/(weight[Trilist[i].p3]+weight[Trilist[i].p1]))*(length(deltap)-stiffness)*(deltap/length(deltap));
            pos[Trilist[i].p3] += deltap1;
            pos[Trilist[i].p1] -= deltap2;
            }
        }
}